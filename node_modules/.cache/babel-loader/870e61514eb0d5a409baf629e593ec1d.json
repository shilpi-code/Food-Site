{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ARCHIT\\\\Desktop\\\\food-project\\\\food-proj\\\\src\\\\Components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport classes from './AvailableMeals.module.css';\nimport { useEffect, useState } from 'react';\nimport Card from '../UI/Card';\nimport MealsItem from './MealsItem/MealsItem'; // const DUMMY_MEALS= [\n//     {\n//         id: 'm1',\n//         name: 'Sushi',\n//         description: 'Finest fish and veggies',\n//         price: 22.99,\n//       },\n//       {\n//         id: 'm2',\n//         name: 'Schnitzel',\n//         description: 'A german specialty!',\n//         price: 16.5,\n//       },\n//       {\n//         id: 'm3',\n//         name: 'Barbecue Burger',\n//         description: 'American, raw, meaty',\n//         price: 12.99,\n//       },\n//       {\n//         id: 'm4',\n//         name: 'Green Bowl',\n//         description: 'Healthy...and green...',\n//         price: 18.99,\n//       },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState();\n  useEffect(() => {\n    const fetchMeals = async () => {\n      const response = await fetch('https://react-food-6160e-default-rtdb.asia-southeast1.firebasedatabase.app/meals.json');\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error('not able to fetch data');\n      }\n\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    fetchMeals().catch(error => {\n      setIsLoading(false);\n      setIsError(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.mealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: /*#__PURE__*/_jsxDEV(MealsItem, {\n      id: meal.id,\n      name: meal.name,\n      description: meal.description,\n      price: meal.price\n    }, meal.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvailableMeals, \"fBzxU4XG8BacTpTaWjGYUZDvdRo=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/Users/ARCHIT/Desktop/food-project/food-proj/src/Components/Meals/AvailableMeals.js"],"names":["classes","useEffect","useState","Card","MealsItem","AvailableMeals","meals","setMeals","isLoading","setIsLoading","isError","setIsError","fetchMeals","response","fetch","responseData","json","ok","Error","loadedMeals","key","push","id","name","description","price","catch","error","message","mealsLoading","MealsError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import classes from './AvailableMeals.module.css';\r\nimport { useEffect, useState } from 'react';\r\nimport Card from '../UI/Card';\r\nimport MealsItem from './MealsItem/MealsItem';\r\n// const DUMMY_MEALS= [\r\n//     {\r\n//         id: 'm1',\r\n//         name: 'Sushi',\r\n//         description: 'Finest fish and veggies',\r\n//         price: 22.99,\r\n//       },\r\n//       {\r\n//         id: 'm2',\r\n//         name: 'Schnitzel',\r\n//         description: 'A german specialty!',\r\n//         price: 16.5,\r\n//       },\r\n//       {\r\n//         id: 'm3',\r\n//         name: 'Barbecue Burger',\r\n//         description: 'American, raw, meaty',\r\n//         price: 12.99,\r\n//       },\r\n//       {\r\n//         id: 'm4',\r\n//         name: 'Green Bowl',\r\n//         description: 'Healthy...and green...',\r\n//         price: 18.99,\r\n//       },\r\n// ];\r\nconst AvailableMeals =() =>{\r\n  const [meals, setMeals]= useState([]);\r\n  const [isLoading, setIsLoading]= useState(true);\r\n  const [isError,setIsError]=useState();\r\n\r\n  useEffect(() =>{\r\n    const fetchMeals= async () =>{\r\n      const response = await fetch('https://react-food-6160e-default-rtdb.asia-southeast1.firebasedatabase.app/meals.json');\r\n      const responseData= await response.json();\r\n\r\n      if(!response.ok){\r\n        throw new Error('not able to fetch data');\r\n      }\r\n\r\n      const loadedMeals= [];\r\n\r\n      for(const key in responseData){\r\n        loadedMeals.push({\r\n          id:key,\r\n          name: responseData[key].name,\r\n          description: responseData[key].description,\r\n          price:responseData[key].price,          \r\n      });\r\n      }\r\n      setMeals(loadedMeals);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchMeals().catch((error) =>{\r\n      setIsLoading(false);\r\n      setIsError(error.message);\r\n    });\r\n  },[])\r\n\r\n  if(isLoading){\r\n    return(\r\n      <section className={classes.mealsLoading}>\r\n        <p>Loading</p>\r\n      </section>\r\n    );\r\n  }\r\n  if (isError) {\r\n    return (\r\n      <section className={classes.MealsError}>\r\n        <p>{isError}</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n    const mealsList= meals.map((meal) =>\r\n        <ul>\r\n            <MealsItem\r\n               key={meal.id}\r\n               id={meal.id}\r\n               name={meal.name}\r\n               description={meal.description}\r\n               price={meal.price}\r\n            />\r\n        </ul>\r\n    );\r\n    return(\r\n        <section className={classes.meals}>\r\n            <Card>      \r\n                <ul>{mealsList}</ul>\r\n            </Card>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AvailableMeals;"]},"metadata":{},"sourceType":"module"}